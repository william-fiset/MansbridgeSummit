//
//  MSRegisterModelTest.swift
//  MansbridgeSummit
//
//  Created by William Fiset on 2015-07-16.
//  Copyright Â© 2015 Mansbridge Summit Dev Team. All rights reserved.
//

import XCTest

class MSRegisterModelTest: XCTestCase {

    let minimalPostParameters = [
            "EktronClientManager" : "-1759591071,1948574407,-1028355414,-1388997516,2009761168,27274999,1979897163,-422906301,-1818005853,646551512,-1228755533,561009152,1762586108,1881432062,1080084488,-1562465382",
            "__VIEWSTATE" : "",
            "__VIEWSTATEGENERATOR" : "97842539",
            "__ekFormId_ctl00_PageContent_FormBlock1" : "4156",
            "__ekFormState_ctl00_PageContent_FormBlock1" : "in",
            "ApplicationAPI4156" : "postback",
            "EktFormId" : "4156",
            "EktFormTitle" : "Mansbridge Summit application form",
            "EktFormDescription" : "",
            "EktFormLang" : "1033",
            "EktFormPublishDate" : "12/17/2014 1:45:03 PM",
            
            // User input fields
            "Name" : "",
            "E-mail" : "elmo10@gmail.com",
            "Gender" : "",
            "Major_minor" : "",
            "Grad_year" : "",
            "Hometown" : "",
            "Dietary_restrictions" : "",
            "Question1" : "",
            "Question2" : ""
        ]
    
    func testPOSTRequest() {
        
        func onSuccess() {
            XCTAssert(true)
        }
        func onFailure(err : NSError?) {

            XCTAssert(false)
        }
        
        postRequest(page, postData: self.minimalPostParameters, closure: postRequestCompletion, failureClosure: onFailure, successClosure: onSuccess)
    }

    func testRequestCompletion() {
        
        func pass1() { XCTAssert(true) }
        func pass2() { XCTAssert(false) }
        func fail1(err : NSError?) { XCTAssert(false) }
        func fail2(err : NSError?) { XCTAssert(true) }

        let anError = NSError(domain: "An Error", code: 666, userInfo: nil )

        // Only this test should pass
        let response0 = "Thank you </strong>for filling out the Mansbridge Summit application form".dataUsingEncoding(NSUTF8StringEncoding)
        postRequestCompletion(response0, err: nil, failureClosure: fail1, successClosure: pass1)
        
        
        let response1 : NSData? = nil
        postRequestCompletion(response1, err: nil, failureClosure: fail2, successClosure: pass2)

        let response2 = "Thank you </strong>for filling out the Mansbridge Summit application form".dataUsingEncoding(NSUTF8StringEncoding)
        postRequestCompletion(response2, err: anError, failureClosure: fail2, successClosure: pass2)
        
        let response3 = "<html><head><title>Bad response</title></head></html>".dataUsingEncoding(NSUTF8StringEncoding)
        postRequestCompletion(response3, err: nil, failureClosure: fail2, successClosure: pass2)

        let response4 = "<html><head><title>Bad response</title></head></html>".dataUsingEncoding(NSUTF8StringEncoding)
        postRequestCompletion(response4, err: anError, failureClosure: fail2, successClosure: pass2)

        let response5 : NSData? = nil
        postRequestCompletion(response5, err: anError, failureClosure: fail2, successClosure: pass2)
        
    }
    
    func testPerformanceExample() {
        
        // This is an example of a performance test case.
        self.measureBlock {
            // Put the code you want to measure the time of here.
            postRequest(page, postData: self.minimalPostParameters, closure: postRequestCompletion, failureClosure: onRegisterFailure, successClosure: onRegisterSuccess)
        }
        
    }

}















